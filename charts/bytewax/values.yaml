# Default values for bytewax.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: bytewax/bytewax
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.19.0-python3.9"

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Apply extra labels to common labels.
extraLabels: {}

podLabels: {}

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000
  runAsGroup: 3000
  runAsNonRoot: true
  runAsUser: 65532

containerName: process

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
    add:
    - NET_BIND_SERVICE    
  readOnlyRootFilesystem: true

service:
  port: 9999

api:
  enabled: true
  port: 3030
  cacheport: 3033

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

## Extra environment variables that will be pass onto statefulset pods
##
## env:
##   ENV_VAR_NAME: value
env: {}

## "valueFrom" environment variable references that will be added to statefulset pods
## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#envvarsource-v1-core
## Renders in container spec as:
##   env:
##     ...
##     - name: <key>
##       valueFrom:
##         <value rendered as YAML>
envValueFrom: {}

## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
## This can be useful for auth tokens, etc. Value is templated.
envFromSecret: ""

## Sensible environment variables that will be rendered as new secret object
## This can be useful for auth tokens, etc
envRenderSecret: {}

## The names of secrets in the same kubernetes namespace which contain values to be added to the environment
## Each entry should contain a name key, and can optionally specify whether the secret must be defined with an optional key.
envFromSecrets: []
## - name: secret-name
##   optional: true

# Defines additional mounts with secrets. Secrets must be manually created in the namespace.
# You can use also projected volumes
extraSecretMounts: []
  # - name: secret-files
  #   mountPath: /etc/secrets
  #   secretName: bytewax-secret-files
  #   readOnly: true
  #   subPath: ""

# Defines additional volume mounts.
extraVolumeMounts: []
  # - name: extra-volume-0
  #   mountPath: /mnt/volume0
  #   readOnly: true
  #   existingClaim: volume-claim
  # - name: extra-volume-1
  #   mountPath: /mnt/volume1
  #   readOnly: true
  #   hostPath: /usr/shared/

configuration:
  pythonFileName: "simple.py"
  processesCount: 1
  workersPerProcess: 1
  keepAlive: false
  jobMode: false
  configMap:
    create: true
    customName:
    files:
      pattern: "examples/*"
      tarName: ""
  recovery:
    enabled: false
    partsCount: 1
    snapshotInterval: 30
    backupInterval: 30
    ## Enable recovery using Kubernetes Persistent Volume Claims to store Sqlite files
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      hostPath:
        enabled: false
        path: ""
      # storageClassName: default
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      # annotations: {}
      finalizers:
        - kubernetes.io/pvc-protection
      # selectorLabels: {}
      ## Extra labels to apply to a PVC.
      extraPvcLabels: {}

## Configuration examples ##
#
# 1. Configmap created manually including basic.py file code and executing that file
# configuration:
#   pythonFileName: "basic.py"
#   processesCount: 1
#   workersPerProcess: 1
#   keepAlive: false
#   jobMode: false
#   configMap:
#     create: false
#     customName: "my-configmap"   
#     files:
#       pattern: 
#       tarName:
#
# 2. Configmap created manually including files.tar and executing basic.py file
# configuration:
#   pythonFileName: "basic.py"
#   processesCount: 1
#   workersPerProcess: 1
#   keepAlive: false
#   jobMode: false
#   configMap:
#     create: false
#     customName: "conf-d"   
#     files:
#       pattern: 
#       tarName: "files.tar"
#
# 3. Configmap created by helm including examples/basic.py file and executing it
# configuration:
#   pythonFileName: "basic.py"
#   processesCount: 1
#   workersPerProcess: 1
#   keepAlive: false
#   jobMode: false
#   configMap:
#     create: true
#     customName: 
#     files:
#       pattern: "examples/basic.py"
#       tarName: 
#
# 4. Configmap created by helm including all the files in examples directory and executing basic.py
# configuration:
#   pythonFileName: "basic.py"
#   processesCount: 1
#   workersPerProcess: 1
#   keepAlive: false
#   jobMode: false
#   configMap:
#     create: true
#     customName: 
#     files:
#       pattern: "examples/*" 
#       tarName:
#
# 5. Configmap created by helm including examples.tar file and executing examples/pagerank.py 
# configuration:
#   pythonFileName: "examples/pagerank.py"  # in this example, the tar file includes "examples" directory
#   processesCount: 1
#   workersPerProcess: 1
#   keepAlive: false
#   jobMode: false
#   configMap:
#     create: true
#     customName:  
#     files:
#       pattern: 
#       tarName: "examples.tar"

customOtlpUrl: ""

opentelemetry-collector:
  enabled: false
  mode: deployment
  config:
    exporters:
      jaeger:
        endpoint: "{{ .Release.Name }}-jaeger-collector:14250"
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: []
          exporters: [logging,jaeger]

jaeger:
  enabled: false
  provisionDataStore:
    cassandra: false
    elasticsearch: true
  storage:
    type: elasticsearch

kubePrometheusStack:
  enabled: false

podMonitor:
  enabled: false
  selector:
    release: my-prometheus