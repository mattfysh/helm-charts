{{- if and .Values.configuration.jobMode .Values.api.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "bytewax.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      bytewax.io/dataflow-info: {{ .Release.Name }}
      {{- include "bytewax.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        bytewax.io/dataflow-info: {{ .Release.Name }}
        {{- include "bytewax.selectorLabels" . | nindent 8 }}
    spec:
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      initContainers:
        - command:
            - sh
            - -c
            - |
              cat << EOF > /tmp/g.py
              import shutil
              import requests
              import time
              import sys

              def get_dataflow_info(url, file_path):
                try:
                  response = requests.get(url, stream=True)
                except Exception as e:
                  print(f"Error trying to get dataflow information from {url}: {e}")
                  return False
                if response.status_code != 200:
                  print(f"Request to {url} failed. Status code: {response.status_code} - Body:\n{response.text}")
                  return False
                with open(file_path, 'wb') as out_file:
                  shutil.copyfileobj(response.raw, out_file)
                  return True

              url = 'http://{{ .Release.Name }}-0.{{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.api.port }}/dataflow'
              file_path = '/usr/share/nginx/html/dataflow.json'

              while get_dataflow_info(url, file_path) == False:
                time.sleep(3)

              saved_file_content = open(file_path, "r").read()
              print(f"Dataflow information saved succesfully to {file_path}")
              print(f"Content: \n{saved_file_content}")
              EOF
              cat << EOF > /etc/nginx/conf.d/default.conf
              server {
                  listen       {{ .Values.api.port }};
                  listen  [::]:{{ .Values.api.port }};
                  server_name  localhost;

                  location / {
                      root   /usr/share/nginx/html;
                      index  index.html index.htm;
                      rewrite ^/dataflow?$ /dataflow.json break;
                  }

                  error_page   500 502 503 504  /50x.html;
                  location = /50x.html {
                      root   /usr/share/nginx/html;
                  }
              }
              EOF
              pip install requests
              python /tmp/g.py
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
          image: python:3.10.10-slim
          imagePullPolicy: Always
          name: init-nginx
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - ALL
            readOnlyRootFilesystem: false # TODO: set to true and resolve pip install issue
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /usr/share/nginx/html
              name: html
            - mountPath: /etc/nginx/conf.d
              name: nginx-conf
            - mountPath: /tmp
              name: tmp
      containers:
      - name: nginx
        image: nginx:1.23.3
        ports:
        - containerPort: {{ .Values.api.port }}
        volumeMounts:
          - mountPath: /usr/share/nginx/html
            name: html
          - mountPath: /etc/nginx/conf.d
            name: nginx-conf
      volumes:
        - emptyDir: {}
          name: html
        - emptyDir: {}
          name: nginx-conf
        - emptyDir: {}
          name: tmp
{{- end }}